// <auto-generated />
using System;
using KhuchraWorkerMinimal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KhuchraWorkerMinimal.Data.Migrations
{
    [DbContext(typeof(KhuchraWorkerContext))]
    [Migration("20241109004822_AddMultipleFields")]
    partial class AddMultipleFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.BaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("BidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("JobBids");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.ClientJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("JobId");

                    b.ToTable("ClientJobs");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.FreelancerJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("integer");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("FreelancerJobs");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Gig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PriceRangeEnd")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceRangeStart")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Gigs");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaidById")
                        .HasColumnType("integer");

                    b.Property<int?>("PaidToId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentCode")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaidById");

                    b.HasIndex("PaidToId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("KhuchraWorkerMinimal.Data.Entities.BaseUser");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Client", b =>
                {
                    b.HasBaseType("KhuchraWorkerMinimal.Data.Entities.BaseUser");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Freelancer", b =>
                {
                    b.HasBaseType("KhuchraWorkerMinimal.Data.Entities.BaseUser");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Freelancer");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Bid", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Job", null)
                        .WithMany("Bids")
                        .HasForeignKey("JobId");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.ClientJob", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Client", "Client")
                        .WithMany("ClientJobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.FreelancerJob", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Gig", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Freelancer", null)
                        .WithMany("Gigs")
                        .HasForeignKey("FreelancerId");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Job", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Payment", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.BaseUser", "PaidBy")
                        .WithMany()
                        .HasForeignKey("PaidById");

                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.BaseUser", "PaidTo")
                        .WithMany()
                        .HasForeignKey("PaidToId");

                    b.Navigation("PaidBy");

                    b.Navigation("PaidTo");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Specialization", b =>
                {
                    b.HasOne("KhuchraWorkerMinimal.Data.Entities.Freelancer", null)
                        .WithMany("Specializations")
                        .HasForeignKey("FreelancerId");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Job", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Client", b =>
                {
                    b.Navigation("ClientJobs");
                });

            modelBuilder.Entity("KhuchraWorkerMinimal.Data.Entities.Freelancer", b =>
                {
                    b.Navigation("Gigs");

                    b.Navigation("Specializations");
                });
#pragma warning restore 612, 618
        }
    }
}
